{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nexport var ActionSheetCancelledError = function (_Error) {\n  _inherits(ActionSheetCancelledError, _Error);\n\n  var _super = _createSuper(ActionSheetCancelledError);\n\n  function ActionSheetCancelledError() {\n    var _this;\n\n    _classCallCheck(this, ActionSheetCancelledError);\n\n    _this = _super.call(this, 'ActionSheet was cancelled but no handler was found. If you do not wish to catch your ActionSheet, then please explicitly set an empty handler `{ cancel: onPress: ()=>{} }`, or set `{ cancel: false }` to disallow cancellation. Alternatively, you may catch ActionSheetCancelled using `.catch(e => { if (e instanceof ActionSheetCancelled) { // your code here } }`');\n    _this.name = 'ActionSheetCancelledError';\n    return _this;\n  }\n\n  return _createClass(ActionSheetCancelledError);\n}(_wrapNativeSuper(Error));","map":{"version":3,"names":["ActionSheetCancelledError","name","Error"],"sources":["C:/Users/melon/todolist/node_modules/react-native-cross-actionsheet/src/ActionSheetCancelledError.js"],"sourcesContent":["export class ActionSheetCancelledError extends Error {\n    constructor() {\n        super('ActionSheet was cancelled but no handler was found. If you do not wish to catch your ActionSheet, then please explicitly set an empty handler `{ cancel: onPress: ()=>{} }`, or set `{ cancel: false }` to disallow cancellation. Alternatively, you may catch ActionSheetCancelled using `.catch(e => { if (e instanceof ActionSheetCancelled) { // your code here } }`');\n        this.name = 'ActionSheetCancelledError';\n    }\n}\n"],"mappings":";;;;;;;;;;;AAAA,WAAaA,yBAAb;EAAA;;EAAA;;EACI,qCAAc;IAAA;;IAAA;;IACV,0BAAM,0WAAN;IACA,MAAKC,IAAL,GAAY,2BAAZ;IAFU;EAGb;;EAJL;AAAA,mBAA+CC,KAA/C"},"metadata":{},"sourceType":"module"}